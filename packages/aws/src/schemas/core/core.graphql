scalar DynamoDbSet

directive @lambda(
    name: String
    shouldParse: Boolean = true
    invocationType: String! = "RequestResponse"
) on FIELD_DEFINITION

directive @model(
    table: String
    partitionKey: String = "id"
    sortKey: String
    timestamp: Boolean
    versioned: Boolean
) on OBJECT

directive @get(
    sourceMapping: [String]
) on FIELD_DEFINITION

directive @query(
    index: String
    sourceMapping: [String]
    scanIndexForward: Boolean
) on FIELD_DEFINITION

directive @put(
    sourceMapping: [String]
    conditional: [String]
) on FIELD_DEFINITION

directive @update(
    sourceMapping: [String]
    conditional: [String]
) on FIELD_DEFINITION

directive @delete(
    conditional: [String]
) on FIELD_DEFINITION

input StringFilterInput {
    eq: String
    lt: String
    lte: String
    gt: String
    gte: String
    in: [String]
    nin: [String]
    contains: String
    between: [String]
    beginsWith: String
    exists: Boolean
    not: StringFilterInput
}

input IntFilterInput {
    eq: Int
    lt: Int
    lte: Int
    gt: Int
    gte: Int
    in: [Int]
    nin: [Int]
    contains: Int
    between: [Int]
    exists: Boolean
    not: IntFilterInput
}

input FloatFilterInput {
    eq: Float
    lt: Float
    lte: Float
    gt: Float
    gte: Float
    in: [Float]
    nin: [Float]
    contains: Float
    between: [Float]
    exists: Boolean
    not: FloatFilterInput
}

input BooleanFilterInput {
    eq: Boolean
    not: BooleanFilterInput
}

enum Sort { ASC DESC }
