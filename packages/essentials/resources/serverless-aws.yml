plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 7 # seconds
  memorySize: 1792 # Mb - 1 vCpu
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  logRetentionInDays: 7
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeAsync
        - lambda:InvokeFunction
      Resource: '*'
  stackTags:
    service: ${self:service}
    stage: ${self:custom.stage}
    region: ${self:custom.region}
    version: ${self:custom.version}

custom:
  account: '#{AWS::AccountId}'
  region: ${self:provider.region}
  stage: ${self:provider.stage}
  version: ${file(package.json):version}
  prefix: ${self:service.name}-${self:custom.stage}
  lambda:
    arnPrefix: arn:aws:lambda:${self:custom.region}:${self:custom.account}:function:${self:service.name}-${self:custom.stage}
  cors:
    origin: '*'
    maxAge: 86400
    cacheControl: max-age=86400
    headers: [ Content-Type, Authorization, Range ]
  environment:
    default:
      STAGE: ${self:custom.stage}
      REGION: ${self:custom.region}
      SERVICE: ${self:service.name}
      VERSION: ${self:custom.version}
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    offline:
      AWS_LAMBDA_ENDPOINT: http://127.0.0.1:4002
      AWS_APIGATEWAY_ENDPOINT: http://127.0.0.1:4001
      AWS_DYNAMODB_ENDPOINT: http://127.0.0.1:5002
      AWS_SNS_ENDPOINT: http://127.0.0.1:6002
      AWS_SQS_ENDPOINT: http://127.0.0.1:7002
  webpack:
    includeModules:
      forceExclude: [ aws-sdk ]
  serverless-offline:
    noPrependStageInUrl: true
    httpPort: 4000
    websocketPort: 4001
    lambdaPort: 4002
    useChildProcesses: true
  dynamodb:
    stages:
      - offline
    start:
      port: 5002
      inMemory: false
      migrate: true
      seed: true
