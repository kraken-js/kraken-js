// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`kraken.js After Generate Project serverless print --stage offline 1`] = `
"service: electric-wolf-kraken
provider:
  name: aws
plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline
custom:
  kraken:
    - '@kraken.js/essentials'
    - '@kraken.js/essentials:aws'
    - '@kraken.js/aws'
    - '@kraken.js/aws:subscriptions'
  webpack:
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk
  account: '#{AWS::AccountId}'
  region: us-east-1
  stage: offline
  prefix: electric-wolf-kraken-offline
  lambda:
    arnPrefix: >-
      arn:aws:lambda:us-east-1:#{AWS::AccountId}:function:electric-wolf-kraken-offline
  cors:
    origin: '*'
    maxAge: 86400
    cacheControl: max-age=86400
    headers:
      - Content-Type
      - Authorization
      - Range
  serverless-offline:
    noPrependStageInUrl: true
    httpPort: 4000
    websocketPort: 4001
    lambdaPort: 4002
    useChildProcesses: true
  dynamodb:
    stages:
      - offline
    start:
      port: 5002
      inMemory: false
      migrate: true
      seed: true
  tables:
    subscriptions: WsSubscriptions-offline
functions:
  wsGraphqlHandler:
    handler: src/ws-handler.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
    name: electric-wolf-kraken-offline-wsGraphqlHandler
"
`;

exports[`kraken.js After Generate Project should generate src/schema.ts file 1`] = `
"import { mergeGraphqlSchemas } from '@kraken.js/core';
import { graphqlSchema as krakenJsAws } from '@kraken.js/aws';

export const graphqlSchema = mergeGraphqlSchemas([
	krakenJsAws
]);
"
`;
