plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-pseudo-parameters
  - serverless-dynamodb-local

custom:
  account: '#{AWS::AccountId}'
  region: ${self:provider.region}
  stage: ${self:provider.stage}
  prefix: ${self:service.name}-${self:custom.stage}
  lambda:
    arnPrefix: arn:aws:lambda:${self:custom.region}:${self:custom.account}:function:${self:service.name}-${self:custom.stage}
  cors:
    origin: '*'
    maxAge: 86400
    cacheControl: 'max-age=86400'
    headers:
      - Content-Type
      - Authorization
      - Range
  webpack:
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk
  dynamodb:
    stages:
      - offline
    start:
      port: 5002
      inMemory: false
      dbPath: ${env:PWD}/.dynamodb
      migrate: true
      seed: true
  serverless-offline:
    noPrependStageInUrl: true
    httpPort: 4000
    websocketPort: 4001
    lambdaPort: 4002
    useChildProcesses: true # set to false for AWS log or testing something that throws errors, true for hot reload
  environment:
    <<<:
      - ${file(^/serverless-env.commons.yml)} # ^/ = here
      - ${file(${opt:home}/resources/serverless-env.yml)} # local module

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 10 # seconds
  memorySize: 256 # Mb
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  logRetentionInDays: 7
  deploymentBucket:
    name: ${self:service.name}-${self:custom.region}-serverless
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeAsync
        - lambda:InvokeFunction
      Resource: '*'
  stackTags:
    SERVICE: ${self:service}
    STAGE: ${self:custom.stage}
    REGION: ${self:custom.region}
    VERSION: ${file(${opt:home}/package.json):version}

# load your local serverless.yml
<<<:
  - ${file(${opt:home}/resources/serverless.yml)}
